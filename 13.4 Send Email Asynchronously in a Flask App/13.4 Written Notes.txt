-> 13 Sending Emails & Email Verification Lesson
    -> Send Email Asynchronously in a Flask App
    -> 5 min to complete · By Brandon Gigous

-> Contents
    -> Introduction
    -> Threading
    -> Send Async Email
    -> Summary: What is Python Async Email

-> Introduction
    -> In the previous lesson, you successfully implemented email functionality and user verification within your Flask app. However, there is one area where you can make a significant improvement: the speed of email sending
    -> By default, sending an email with Flask-Mail blocks the app’s process until the email is sent, which can take a few seconds. This delay might cause a poor user experience, especially if your app needs to send many emails
    -> This lesson will guide you through the process of sending emails asynchronously, meaning your app won't be blocked while emails are being sent. You'll learn how to offload the email-sending task to a background thread, improving the overall performance of your app

-> Threading
    -> No, we're not talking about the kind of "threading" you'd see on Twitter or in online forums. This refers to a technique used in programming to perform multiple tasks simultaneously, or in parallel
    -> In Flask, when you send an email using Flask-Mail, the function that sends the email blocks the app’s main thread. The app has to wait for the email to be sent before it can move on to the next task. This is particularly problematic if you’re sending multiple emails or if the email-sending process takes time
    -> To understand why this happens, it's essential to know a bit about Flask's application context. Flask uses an application context to manage things like configuration settings. This context is necessary to access certain objects (like the `current_app` object) that Flask-Mail needs to send an email
    -> When Flask-Mail sends an email, it relies on this application context to access settings like SMTP server configuration. However, because both the app and the email-sending function run on the same thread, Flask-Mail must finish sending the email before it can return control to the main app. This process introduces a delay, which you want to avoid
    -> Fortunately, you can solve this problem by using **threading**. By creating a separate thread for sending the email, you can allow your app to continue executing other tasks while the email is being sent in the background

-> Send Async Email
    -> To send emails asynchronously in Flask, you need to create a separate thread for the email-sending task. This allows Flask to continue handling other requests while the email is being sent in the background
    -> The process of creating a new thread is straightforward using Python’s `threading` module. However, Flask requires an application context, which is typically available only on the main thread. To work around this, you need to manually pass the application context to the new thread
    -> Here’s how you can do that:

        -> To send an email asynchronously, you can define a function, `send_async_email`, that creates a new application context within the new thread. This will allow the thread to send the email without blocking the main app
        -> The function will look like this:

            ```python
            def send_async_email(app, msg):
                with app.app_context():
                    mail.send(msg)
            ```

        -> What happens here is that we pass the actual Flask app instance to the `send_async_email` function, and inside that function, we manually create a new application context using `app.app_context()`. This ensures that Flask-Mail has access to the app’s configuration settings while the email is being sent

        -> Next, we need to modify the `send_email` function to start a new thread that will handle the email-sending task:

            ```python
            def send_email(to, subject, template, **kwargs):
                app = current_app._get_current_object()  # Get the actual app instance
                msg = Message(
                    subject=app.config['RAGTIME_MAIL_SUBJECT_PREFIX'] + subject,
                    recipients=[to],
                    sender=app.config['RAGTIME_MAIL_SENDER']
                )
                msg.body = render_template(template + '.txt', **kwargs)
                msg.html = render_template(template + '.html', **kwargs)

                # Create a new thread to send the email asynchronously
                thread = Thread(target=send_async_email, args=[app, msg])
                thread.start()  # Start the thread
            ```

        -> In the code above:
            - We first get the actual app instance using `current_app._get_current_object()`. This is necessary because Flask’s `current_app` is a proxy object, not the actual app instance
            - We create a new `Message` object for the email with the subject, recipients, and sender pulled from the app's configuration
            - The `msg.body` and `msg.html` are populated by rendering the email templates
            - Finally, we create a new thread using Python's `Thread` class, which calls the `send_async_email` function in the background to send the email

        -> By running the email-sending task in a separate thread, your Flask app can continue to handle other requests without waiting for the email to be sent, thus improving performance

-> Summary: What is Python Async Email
    -> Sending emails asynchronously in Flask involves creating a background thread to handle the email-sending task. This prevents the main app from being blocked while emails are being sent
    -> To implement asynchronous email sending:
        1. Create a function (`send_async_email`) that manually creates a new application context and sends the email
        2. Modify the `send_email` function to start a new thread and call `send_async_email` in the background
        3. The new thread will handle the email-sending task, while your app continues to process other requests
    -> This approach improves the performance of your app, especially if you need to send a large number of emails or if the email-sending process takes time
    -> You are now capable of sending emails asynchronously in Flask! This will ensure your app remains responsive, even when handling time-consuming email tasks
    -> Don't forget: If you're using a database, it's essential to perform any necessary database migrations after changes like these

    -> Congratulations! You’ve successfully learned how to send emails asynchronously in Flask, boosting the performance of your app
