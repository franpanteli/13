-> Introduction to sending emails asynchronously in a Flask app
	-> Email functionality and user verification were implemented in the previous lesson
	-> Threading can be used to improve email sending speed
	-> Flask-Mail relies on an application context, which is why it blocks until the email is sent
	-> The app is blocked until the email sending function completes
	-> Emails take time to send due to technology that helps prevent spam
	-> The solution is to use threading to avoid blocking the app during email sending

-> Threading
	-> Threading allows email sending to happen in parallel with the app's normal operation
	-> Without threading, the app is blocked while waiting for the email to be sent
	-> The solution is to create another thread specifically for sending emails
	-> Use the Thread class to create the new thread for sending emails
	-> The app context is still needed for the email to be sent properly
	-> A new thread is created, and the app context is passed along with the email message

-> Send Async Email
	-> To send an email asynchronously, a new thread is created
	-> The application instance is passed to the new thread
	-> The app context is artificially created in the new thread using `app.app_context()`
	-> The email is sent within this new application context to avoid blocking

-> Code for sending emails asynchronously
	-> The `send_email()` function is used to send the email
	-> The email is configured with subject, recipients, and sender information
	-> The message is rendered with both plain-text and HTML templates
	-> A new thread is created using `Thread(target=send_async_email, args=[app, msg])`
	-> The thread is started with `thread.start()`

-> Functionality of `send_async_email()`
	-> The `send_async_email()` function creates an app context using `with app.app_context()`
	-> Inside the app context, `mail.send(msg)` sends the email asynchronously
	-> The new thread allows the email to be sent without blocking the app

-> Summary of Python Async Email
	-> Emails are sent in parallel with the appâ€™s normal operation to avoid blocking
	-> Threading allows for creating new threads to send emails asynchronously
	-> The application instance is passed to the new thread to create a new app context
	-> This avoids blocking and ensures the email is sent correctly without interrupting the app's operation

-> Final reminder to perform a database migration for changes related to email sending and app context
	-> Database migrations ensure that the app remains up to date with changes made in the codebase
	-> Database migration is essential for maintaining app consistency after changes are implemented

-> Conclusion
	-> The lesson covers asynchronous email sending with Flask, which improves speed and prevents blocking
	-> The next section will cover user roles and how to implement them in Flask apps
	-> Mentorship program is available for students who want further assistance and support during their learning journey
