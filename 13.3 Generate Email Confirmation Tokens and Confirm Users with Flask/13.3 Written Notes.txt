-> Email confirmation tokens are used to verify user registration and prevent spam accounts
    -> Tokens ensure users have access to the email they provided for validation
    -> Tokens are generated by the app, not by users, for security reasons
    -> Cryptography ensures that tokens are valid and not manipulated
    -> Using user IDs directly as tokens is insecure and can lead to exploitation

-> To generate tokens securely, Flask uses a cryptographic package
    -> The package used here is pyjwt, which can generate signed tokens
    -> Tokens are encoded using a secret key to prevent unauthorised access
    -> Tokens expire after a set time, ensuring they can't be reused indefinitely

-> The correct way to generate a token is to use pyjwt and a secret key for signing
    -> Expiration times can be set, and if the token expires, it is invalid
    -> Tokens are created with user-specific information (e.g., user ID)
    -> When the token is decoded, it is checked for validity and expiration

-> To implement token generation in your app:
    -> Install pyjwt using pip
    -> Use Flask’s secret key to sign tokens
    -> Create a datetime object for expiration
    -> Use JWT encoding to generate the token

-> To validate a token:
    -> Decode it with the app’s secret key
    -> Ensure it hasn’t expired
    -> Verify the user ID matches the data in the token

-> After generating tokens, update the user model to store the confirmation status
    -> Add a boolean column to the user model to track if the user has confirmed their account
    -> Implement methods to generate and confirm tokens for users
    -> The token generation method uses the user ID and an expiration time

-> The user confirmation method:
    -> Decodes the token to check for validity
    -> Checks the token hasn’t expired
    -> Ensures the user ID matches the one in the token
    -> Updates the user’s confirmation status if everything checks out

-> To test token functionality, write unit tests that simulate token generation and user confirmation
    -> Tests should cover all possible success and failure scenarios for token generation and validation

-> Once token generation is working, implement the email confirmation process
    -> Send users an email with a confirmation link containing the token
    -> Users need to click the link to confirm their registration
    -> The confirmation link contains the token and leads to a Flask route that processes it

-> The confirmation route:
    -> Verifies the token and confirms the user’s email
    -> Redirects the user to another page if the token is valid
    -> Displays an error message if the token is invalid or expired

-> To implement email verification, create a view function that generates and sends an email
    -> Include a link to the confirmation route with the token embedded
    -> Use Flask's url_for method to generate a fully-qualified URL for the confirmation link

-> Prevent unconfirmed users from accessing the app by using a before-request function
    -> This function checks if the user is authenticated and confirmed before allowing access
    -> Redirects unconfirmed users to a separate page requesting confirmation

-> To block access, apply the before_request handler to check the user’s confirmation status
    -> If the user is authenticated but not confirmed, they are redirected to the unconfirmed page

-> Create a template to inform unconfirmed users that they need to verify their email
    -> Include an option to resend the confirmation email to unconfirmed users

-> Finally, after implementing token generation and confirmation, ensure the user authentication system is robust
    -> With confirmation in place, users cannot access restricted parts of the app until they confirm their email
